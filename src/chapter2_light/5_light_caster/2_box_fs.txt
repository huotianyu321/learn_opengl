#version 330 core
out vec4 FragColor;

in vec3 FragPos; 
in vec3 Normal;
in vec2 TexCoords;

struct Material {
    sampler2D diffuse; // 采样漫反射贴图（环境光颜色和漫反射颜色都用漫反射贴图）
    sampler2D specular; // 镜面光贴图
    float shininess; // 高光反光度
};
uniform Material material;

struct Light {
    vec3 position;

    vec3 ambient; // 光强通常较弱
    vec3 diffuse;
    vec3 specular; // 光强通常较强

    float constant; // 常数衰减系数
    float linear; // 线性衰减系数
    float quadratic; // 二次衰减系数
};
uniform Light light;

uniform vec3 viewPos; // 相机位置

void main()
{
    float distance = length(light.position - FragPos); // 计算光源到片段的距离
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); // 衰减系数

    // 环境光
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords)); 

    // 漫反射
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    // 计算两向量的夹角，代表漫反射强度
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * light.diffuse  * vec3(texture(material.diffuse, TexCoords));

    // 镜面反射
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 
    // 镜面反射强度
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * vec3(texture(material.specular, TexCoords));
    
    ambient *= attenuation; // 环境光衰减
    diffuse *= attenuation; // 漫反射衰减
    specular *= attenuation; // 镜面光衰减
    FragColor = vec4((ambient + diffuse + specular), 1.0);
}