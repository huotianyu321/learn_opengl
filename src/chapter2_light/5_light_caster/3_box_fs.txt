#version 330 core
out vec4 FragColor;

in vec3 FragPos; 
in vec3 Normal;
in vec2 TexCoords;

struct Material {
    sampler2D diffuse; // 采样漫反射贴图（环境光颜色和漫反射颜色都用漫反射贴图）
    sampler2D specular; // 镜面光贴图
    float shininess; // 高光反光度
};
uniform Material material;

struct Light {
    vec3 position; // 光源位置，（设置为相机位置，聚光灯随相机移动）
    vec3 direction; // 聚光灯方向，圆锥中心线的方向，（设置为相机Front向量)
    float cutOff; // 切光角的余弦值

    float constant;
    float linear;
    float quadratic;

    vec3 ambient; // 光强通常较弱
    vec3 diffuse;
    vec3 specular; // 光强通常较强
};
uniform Light light;

uniform vec3 viewPos; // 相机位置

void main()
{
    vec3 lightDir = normalize(light.position - FragPos); // 从片段指向光源的方向向量
    float theta = dot(lightDir, normalize(-light.direction)); // 夹角余弦值

    if (theta > light.cutOff) { // 在切光角以内(注意这里是余弦值，角度越小，余弦值越大)

        // 环境光
        vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords)); 

        // 漫反射
        vec3 norm = normalize(Normal);
        // 计算两向量的夹角，代表漫反射强度
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * light.diffuse  * vec3(texture(material.diffuse, TexCoords));

        // 镜面反射
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm); 
        // 镜面反射强度
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        vec3 specular = spec * light.specular * vec3(texture(material.specular, TexCoords));

         // 计算衰减
        float distance = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

        // ambient  *= attenuation; // 移除环境光的衰减
        diffuse   *= attenuation;
        specular *= attenuation;

        FragColor = vec4(( ambient + diffuse + specular ), 1.0);
      
    } else { // 在切光角以外只受环境光影响

        // 环境光
        vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords)); 
        FragColor = vec4(ambient, 1.0);

    }

}