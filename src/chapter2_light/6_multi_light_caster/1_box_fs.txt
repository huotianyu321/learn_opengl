
#version 330 core
out vec4 FragColor;

in vec3 FragPos; 
in vec3 Normal;
in vec2 TexCoords;

uniform vec3 viewPos;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};
uniform Material material;

struct DirLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirLight dirLight;


struct  PointLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float constant;
    float linear;
    float quadratic;
};
uniform PointLight pointLights[6];

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
    float constant;
    float linear;
    float quadratic;
};
uniform SpotLight spotLight;

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 diffuseColor, vec3 specularColor);
vec3 calcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor);
vec3 calcSpotLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor);

void main() {
    vec3 normal = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 diffuseColor = vec3(texture(material.diffuse, TexCoords));
    vec3 specularColor = vec3(texture(material.specular, TexCoords));

    vec3 output

    output += calcDirLight(dirLight, vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0));
    for (int i = 0; i < 6; i++) {
        output += calcPointLight(pointLights[i], vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0));
    }
    output += calcSpotLight(spotLight, vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0));

}


vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 diffuseColor, vec3 specularColor) {
    vec3 ambient = light.ambient * diffuseColor;

    vec3 lightDir = normalize(-light.direction); // lightDir指向光源，light.direction从光源出发
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * light.diffuse * diffuseColor;

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * specularColor;

    return ambient + diffuse + specular;
}

vec3 calcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor) {

    float distance = length(fragPos - light.position);
    float attenuation = 1.0 / (1.0 + light.linear * distance + light.quadratic * distance * distance);
        
    vec3 ambient = light.ambient * diffuseColor;

    vec3 lightDir = normalize(light.position - fragPos); // lightDir指向光源
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * light.diffuse * diffuseColor;

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * specularColor;

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return ambient + diffuse + specular;
}