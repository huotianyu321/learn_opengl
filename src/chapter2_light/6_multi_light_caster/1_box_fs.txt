
#version 330 core
out vec4 FragColor;

in vec3 FragPos; 
in vec3 Normal;
in vec2 TexCoords;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct DirLight {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  


struct PointLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    vec3 position;
    vec3 direction; // 这是spotLight圆锥中轴线的方向， 和dirLight的direction含义不同
    float cutOff;
    float outerCutOff;
    
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
    float constant;
    float linear;
    float quadratic;
};

// 计算平行光光照结果
vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 diffuseColor, vec3 specularColor);
// 计算点光源光照结果
vec3 calcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor);
// 计算聚光光照结果
vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor);

uniform vec3 viewPos;
uniform Material material;
uniform DirLight dirLight;
uniform SpotLight spotLight;
#define NR_POINT_LIGHTS 4
uniform PointLight pointLights[NR_POINT_LIGHTS];

void main() {

    vec3 normal = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 diffuseColor = vec3(texture(material.diffuse, TexCoords));
    vec3 specularColor = vec3(texture(material.specular, TexCoords));

    vec3 outputColor;

    outputColor += calcDirLight(dirLight, normal, viewDir, diffuseColor, specularColor);
    for (int i = 0; i < NR_POINT_LIGHTS; i++) {
        outputColor += calcPointLight(pointLights[i], normal, viewDir, FragPos, diffuseColor, specularColor);
    }
    outputColor += calcSpotLight(spotLight, normal, viewDir, FragPos, diffuseColor, specularColor);

    FragColor = vec4(outputColor, 1.0);

}

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec3 diffuseColor, vec3 specularColor) {

    vec3 ambient = light.ambient * diffuseColor;

    vec3 lightDir = normalize(-light.direction); // lightDir指向光源，light.direction从光源出发
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * light.diffuse * diffuseColor;

    vec3 reflectDir = normalize(reflect(-lightDir, normal));
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * specularColor;

    return ambient + diffuse + specular;

}

vec3 calcPointLight(PointLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor) {
       
    vec3 ambient = light.ambient * diffuseColor;

    vec3 lightDir = normalize(light.position - fragPos); // lightDir从片段指向光源位置
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * light.diffuse * diffuseColor;

    vec3 reflectDir = normalize(reflect(-lightDir, normal));
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * specularColor;

    // 衰减
    float distance = length(fragPos - light.position);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    return ambient + diffuse + specular;

}

vec3 calcSpotLight(SpotLight light, vec3 normal, vec3 viewDir, vec3 fragPos, vec3 diffuseColor, vec3 specularColor) {

    vec3 lightDir = normalize(light.position - fragPos); // 从片段指向光源位置

    vec3 ambient = light.ambient * diffuseColor;

    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * light.diffuse * diffuseColor;

    vec3 reflectDir = normalize(reflect(-lightDir, normal));
    float spec = pow(max(dot(reflectDir, viewDir), 0.0), material.shininess);
    vec3 specular = spec * light.specular * specularColor;

    // 衰减
    float distance = length(fragPos - light.position);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    // 柔化边缘
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // ambient *= instensity;
    diffuse *= intensity;
    specular *= intensity;

    return ambient + diffuse + specular;

}
