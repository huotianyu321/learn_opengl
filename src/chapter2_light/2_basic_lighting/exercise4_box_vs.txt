#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal; // 法向量

out vec3 LightingColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 lightPos; // 光源位置（世界坐标系)
uniform vec3 viewPos; // 相机位置 (世界坐标系)
uniform vec3 lightColor;
// uniform float specPower; // 高光反光度

void main()
{
    // 使用变换矩阵左上角3*3矩阵的逆矩阵的转置矩阵对法向量进行变换，防止非均匀缩放对法向量的影响
    vec3 Normal = mat3(transpose(inverse(model))) * aNormal; // 计算法向量
    vec3 norm = normalize(Normal);

    // 将顶点位置转换到世界坐标系
    vec3 FragPos = vec3(model * vec4(aPos, 1.0)); // 计算片段位置

    // 环境光
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    // 漫反射
    float diffuseStrength = 1;
    vec3 lightDir = normalize(lightPos - FragPos);
    // 计算两向量的夹角，代表漫反射强度
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseStrength * diff * lightColor;

    // 镜面反射
    float specularStrength = 1.0;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 
    // 镜面反射强度
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;

    LightingColor = ambient + diffuse + specular;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}