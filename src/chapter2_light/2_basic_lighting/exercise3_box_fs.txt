#version 330 core
out vec4 FragColor;

in vec3 FragPos; 
in vec3 Normal;
in vec3 LightPos;

uniform vec3 objectColor;
uniform vec3 lightColor; 
// uniform vec3 viewPos; // 现在不需要相机位置，在观察空间中相机位置始终是(0, 0, 0)

uniform float specPower; // 高光反光度

void main()
{
    // 环境光
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;

    // 漫反射
    float diffuseStrength = 1.0;
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    // 计算两向量的夹角，代表漫反射强度
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseStrength * diff * lightColor;

    // 镜面反射
    float specularStrength = 0.5;
    vec3 viewPos = vec3(0.0, 0.0, 0.0); // 相机位置在观察空间中始终是(0, 0, 0)
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 
    // 镜面反射强度
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), specPower);
    vec3 specular = specularStrength * spec * lightColor;

    
    FragColor = vec4((ambient + diffuse + specular) * objectColor, 1.0);
}